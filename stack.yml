---
AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  vpcCIDR:
    Description: "CIDR for VPC"
    Default: 10.0.0.0/16
    Type: String
  
  subnetCIDR:
    Description: "CIDR for Subnets"
    Default: 10.0.0.0/24
    Type: String

  environmentName:
    Description: "This is the name of the Environment"
    Type: String

  azCount:
    Description: "Number of availability zones"
    Type: Number
  
  clusterName:
    Description: "This is the name of the ECS Cluster"
    Type: String

  taskExecRole:
    Description: "This is the name of the execution role"
    Type: String

  autoScalingcRole:
    Description: "This is the name of the autoScaling role"
    Type: String
  
  taskDefinitionName:
    Description: "This is the name of the Task Definition"
    Type: String

  fargateCPU:
    Description: "This is the value in MB for the CPU"
    Type: Number

  fargateMemory:
    Description: "This is the value in MB for the Memory"
    Type: Number
  
  appName:
    Description: "This is the name of the app that will be deployed inside the ECS tasks"
    Type: String

  imageLocation:
    Description: "This is the location of the ECR image which contains the application code"
    Type: String

  containerPort:
    Description: "This is the port on which the application is running inside the container"
    Type: Number

  hostPort:
    Description: "This is the port on host machine which is mapped to the container port"
    Type: Number
  
  appCount: 
    Description: "This is count of the application that we want to have"
    Type: Number

  ecsServiceName:
    Description: "This is the name of the ECS Service"
    Type: String

  loadBalancerName:
    Description: "This is the name of the Load Balancer"
    Type: String
  
  targetGroupName:
    Description: "This is the name of the target group for ALB"
    Type: String

  maxContainers:
    Description: "This is the max number of containers"
    Type: Number
  
  minContainers:
    Description: "This is the max number of containers"
    Type: Number

  autoScalingPolicyName:
    Description: "This is the name of the AutoScaling Policy"
    Type: String


Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref vpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Ref environmentName

  subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 0, Fn::Cidr: [ !GetAtt VPC.CidrBlock, 3, 8] ]
      AvailabilityZone: !Select [ 0, !GetAZs ] # Get the second AZ in the list
      Tags:
        - Key: Name
          Value: !Ref environmentName

  subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 1, Fn::Cidr: [ !GetAtt VPC.CidrBlock, 3, 8] ]
      AvailabilityZone: !Select [ 1, !GetAZs ] # Get the second AZ in the list
      Tags:
        - Key: Name
          Value: !Ref environmentName

  subnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 2, Fn::Cidr: [ !GetAtt VPC.CidrBlock, 3, 8] ]
      AvailabilityZone: !Select [ 2, !GetAZs ] # Get the second AZ in the list
      Tags:
        - Key: Name
          Value: !Ref environmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
      - Key: Name
        Value: !Ref environmentName
  
  
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    # Notice how you can't attach an IGW to a VPC unless both are created:
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref environmentName

  PublicRoute1: # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref subnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref subnet2
      RouteTableId: !Ref PublicRouteTable
  
  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref subnet3
      RouteTableId: !Ref PublicRouteTable

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Ref taskExecRole
      AssumeRolePolicyDocument: 
        Statement:
          - Effect: "Allow"
            Action: "sts:AssumeRole"
            Principal:
              Service: "ecs-tasks.amazonaws.com"
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Ref autoScalingcRole
      AssumeRolePolicyDocument: 
        Statement:
          - Effect: "Allow"
            Action: "sts:AssumeRole"
            Principal:
              Service: "ecs-tasks.amazonaws.com"
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: AttachGateway
    Properties:
      GroupDescription: "Security Group for Application Load Balancer"
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: -1
        FromPort: 0
        ToPort: 0
        CidrIp: 0.0.0.0/0

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: AttachGateway
    Properties:
      GroupDescription: "Security Group for ECS which allows the inbound access from the ALB only"
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: !Ref containerPort
        ToPort: !Ref hostPort
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: -1
        FromPort: 0
        ToPort: 0
        CidrIp: 0.0.0.0/0

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref clusterName
      Tags:
      - Key: Name
        Value: !Ref environmentName 

  taskDefinition: 
    Type: AWS::ECS::TaskDefinition
    Properties: 
      Family: !Ref taskDefinitionName
      Cpu: !Ref fargateCPU
      Memory: !Ref fargateMemory
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions: 
        - Name: !Ref appName
          Image: !Ref imageLocation
          Cpu: !Ref fargateCPU
          Memory: !Ref fargateMemory
          PortMappings: 
            - ContainerPort: !Ref containerPort
              HostPort: !Ref hostPort
      RequiresCompatibilities:
        - "FARGATE"
      Tags:
      - Key: Name
        Value: !Ref environmentName

  ECSService: 
    Type: AWS::ECS::Service
    DependsOn: ALBListener	
    Properties: 
      ServiceName: !Ref ecsServiceName
      Cluster: !Ref ECSCluster
      DesiredCount: 3
      TaskDefinition: !Ref taskDefinition
      LaunchType: FARGATE 
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: [ !Ref ECSSecurityGroup ]
          Subnets: [ !Ref subnet1, !Ref subnet2, !Ref subnet3 ]
      LoadBalancers: 
        - ContainerName: !Ref appName
          ContainerPort: !Ref containerPort
          TargetGroupArn: !Ref ALBTargetGroup
      Tags:
        - Key: Name
          Value: !Ref environmentName
  
  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref loadBalancerName
      Type: application
      Scheme: internet-facing
      Subnets: [ !Ref subnet1, !Ref subnet2, !Ref subnet3 ]
      SecurityGroups: [ !Ref ALBSecurityGroup ]
      Tags:
        - Key: Name
          Value: !Ref environmentName

  # Listen on port 80, pass all traffic to our only TargetGroup:
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    # DependsOn: [ AppLoadBalancer, ALBTargetGroup  ]
    Properties:
      Port: 80
      Protocol: HTTP
      LoadBalancerArn: !Ref AppLoadBalancer
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup

    # TargetGroup
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Ref targetGroupName
      VpcId: !Ref VPC
      Port: !Ref containerPort  
      Protocol: HTTP
      TargetType: "ip"
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 20
      HealthCheckTimeoutSeconds: 3
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 2
      Tags:
        - Key: Name
          Value: !Ref environmentName
            
        
  CloudFront:
    Type: AWS::CloudFront::Distribution
    DependsOn: AppLoadBalancer
    Properties: 
      DistributionConfig: 
        Enabled: True
        DefaultCacheBehavior:
          TargetOriginId: test_cf
          ViewerProtocolPolicy: allow-all
          ForwardedValues:
            QueryString: false
        Origins:
          - CustomOriginConfig:
              OriginProtocolPolicy: http-only
              HTTPPort: 80
            DomainName: !GetAtt AppLoadBalancer.DNSName
            Id: test_cf

  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: [ ECSService,AutoScalingTarget ]

    Properties:
      PolicyName: !Ref autoScalingPolicyName
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 2
        ScaleInCooldown: 30
        ScaleOutCooldown: 30
        PredefinedMetricSpecification:
          PredefinedMetricType: ALBRequestCountPerTarget
          ResourceLabel: !Join 
            - '/' 
            - - !GetAtt AppLoadBalancer.LoadBalancerFullName
              - !GetAtt ALBTargetGroup.TargetGroupFullName
  
  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: ECSService
    Properties:
      MaxCapacity: !Ref maxContainers
      MinCapacity: !Ref minContainers
      RoleARN: !GetAtt AutoScalingRole.Arn 
      ServiceNamespace: ecs
      ScalableDimension: ecs:service:DesiredCount
      ResourceId: !Join ['/', [service, !Ref clusterName, !Ref ecsServiceName]]


Outputs:
  LoadBalancerDNSName:
    Description: DNS of the LoadBalancer
    Value: !GetAtt AppLoadBalancer.DNSName
  CloudFrontDromainName:
    Description: Domain Name of CloudFront
    Value: !GetAtt CloudFront.DomainName
 



